'''

Triangle, square, pentagonal, hexagonal, heptagonal, and octagonal numbers are 
all figurate (polygonal) numbers and are generated by the following formulae: 

Triangle 	  	P3,n=n(n+1)/2 	  	1, 3, 6, 10, 15, ...
Square 	  	    P4,n=n2 	  	    1, 4, 9, 16, 25, ...
Pentagonal 	  	P5,n=n(3n−1)/2 	  	1, 5, 12, 22, 35, ...
Hexagonal 	  	P6,n=n(2n−1) 	  	1, 6, 15, 28, 45, ...
Heptagonal 	  	P7,n=n(5n−3)/2 	  	1, 7, 18, 34, 55, ...
Octagonal 	  	P8,n=n(3n−2) 	  	1, 8, 21, 40, 65, ...
The ordered set of three 4-digit numbers: 8128, 2882, 8281, has three 
interesting properties. 

The set is cyclic, in that the last two digits of each number is the first two 
digits of the next number (including the last number with the first). 

Each polygonal type: triangle (P3,127=8128), square (P4,91=8281), and 
pentagonal (P5,44=2882), is represented by a different number in the set. 

This is the only set of 4-digit numbers with this property. 

Find the sum of the only ordered set of six cyclic 4-digit numbers for which 
each polygonal type: triangle, square, pentagonal, hexagonal, heptagonal, and 
octagonal, is represented by a different number in the set. 

'''
import itertools

from utilities.specialNumbers import generateFromLambda


def createNumbers(f):
	return [str(i) for i in  list(generateFromLambda(f, 159)) if 999 < i and i < 10000]

def solveInOrder(numbers):
	for ns in numbers:
		start = ""
		result = []
		for n in ns:
			if start == "" or n[:2] == start:
				result.append(n)
				start = n[2:]
				break
			
		if len(result) == 6:
			print(result)

			

def hasProperty():
	numbers = [tetras, pentas, hexas, heptas, octas]
	candidates = []  # [([numbers], [visited numbers]]
# 	for n in trias:
# 		neighbors = []
# 		for ns in numbers:
# 			for n2 in ns:
# 				if(neighbors(n,n2)):
# 					neighbors.append((n2, (numbers - ns)) )
	

if __name__ == '__main__':
	trias = createNumbers(lambda n: n * (n + 1) // 2)
	tetras = createNumbers(lambda n: n * n)
	pentas = createNumbers(lambda n: n * (3 * n - 1) // 2)
	hexas = createNumbers(lambda n: n * (2 * n - 1))
	heptas = createNumbers(lambda n: n * (5 * n - 3) // 2)
	octas = createNumbers(lambda n: n * (3 * n - 2))

	print(trias)
	print(tetras) 
	print(pentas) 
	print(hexas)
	
	numbers = [tetras, trias, pentas, hexas, heptas, octas]
	
	for ns in itertools.combinations(numbers, len(numbers)):
		solveInOrder(ns)
	
	print("finished")


'''

Euler's Totient function, φ(n) [sometimes called the phi function], is used to 
determine the number of positive numbers less than or equal to n which are 
relatively prime to n. For example, as 1, 2, 4, 5, 7, and 8, are all less than 
nine and relatively prime to nine, φ(9)=6.The number 1 is considered to be 
relatively prime to every positive number, so φ(1)=1.  

Interestingly, φ(87109)=79180, and it can be seen that 87109 is a permutation 
of 79180. 

Find the value of n, 1 < n < 10**7, for which φ(n) is a permutation of n and the 
ratio n/φ(n) produces a minimum. 

if gcd(m,n) = 1, phi(mn) = phi(m) * phi(n)
if p is prime, phi(p) = p - 1 (for p < 10^20)
if n is even, phi(2n) = 2 phi(n)

'''

from itertools import combinations
from math import sqrt
from timeit import Timer

from utilities.divisors import isPrime, getPrimes, getFactorization
from utilities.specialNumbers import isPermutation


def phi(n):
	result = n
	if isPrime(n):
		return n - 1
	for p in getFactorization(n):
		result *= (1 - 1 / p[0])
	return result		

def candidates_1(maxi):
	return [(n / phi(n), n) for n in range(1, maxi) if isPermutation(n, str(phi(n)))]

def candidates_2(maxi):
	result = []
	for n in range(1, maxi):
		p = phi(n)
		if isPermutation(n, str(p)):
			result.append((n / p, n))
	return result

def time_some_phi_funcs(maxi, runs=1):
	t = Timer("candidates_3(%d)" % maxi, "from __main__ import candidates_3, phi")
	print("%.2f sec/pass" % (t.timeit(number=runs) / runs))
	t = Timer("candidates_1(%d)" % maxi, "from __main__ import candidates_1, phi")
	print("%.2f sec/pass" % (t.timeit(number=runs) / runs))
# 	t = Timer("candidates_2(50000)", "from __main__ import candidates_2, phi")
# 	print("%.2f sec/pass" % (t.timeit(number=runs) / runs))


def candidates_3(maxi):
	n2phi = {}
	
	primes = getPrimes(maxi)
	for p in primes:
		n2phi[p] = p - 1	
	for n, m in combinations(primes, 2):
		if n * m < maxi:
			n2phi[n * m] = n2phi[n] * n2phi[m]
	
	for n in range(2, maxi):
		if not n in n2phi.keys():
			n2phi[n] = phi(n)
			if n % 2 == 0:
				fact = 2
				m = fact * n
				while m <= maxi:
					n2phi[m] = fact * n2phi[n]
					fact *= 2
					m = fact * n
	return [(n / p, n) for n, p in n2phi.items() if isPermutation(n, str(p))]		

def candidates_4(maxi):
	n2phi = {}
	
	primes = getPrimes(maxi)
	for p in primes:
		n2phi[p] = p - 1	
	for n, m in combinations(primes, 2):
		if n * m < maxi:
			n2phi[n * m] = n2phi[n] * n2phi[m]
	return [(n / p, n) for n, p in n2phi.items() if isPermutation(n, str(p))]		


def clever_primes(maxi, distance):
	return [p for p in getPrimes(maxi) if abs(p - int(sqrt(maxi))) < distance]

def candidates_5(maxi, primes):
	for n, m in combinations(primes, 2):
		if n * m > maxi:
			continue
		phi = (n - 1) * (m - 1)
		if isPermutation(n * m, str(phi)):
			yield ((n * m) / phi, n * m, phi) 

if __name__ == '__main__':
# 	for candi in candidates_5(10 ** 5):
# 		print(candi)
	maxi = 10 ** 7
	distance = 1000
	print(min(list(candidates_5(maxi, clever_primes(maxi, distance)))))
# 	candidates = [(n / phi(n), n) for n in range(1, 10 ** 6) if isPermutation(n, str(phi(n)))]
# 	time_some_phi_funcs(10 ** 6)

# 	cs = [(1.75, 21), (1.515625, 291), (2.008, 502), (2.001589825119237, 2518), (1.5015060240963856, 2991), (1.2514108352144468, 4435), (1.5008389261744965, 5367), (1.5007987220447285, 5637), (2.000194969779684, 20518), (1.0218576526566217, 20617), (2.0001899696048633, 21058), (1.0465257078986587, 22471), (2.000154344806297, 25918), (1.0630064346997141, 35683), (1.2501410835214446, 44305), (1.0204214593817398, 45421), (1.2501264414323285, 49435), (1.5000833889259506, 53967), (1.5000790388871326, 56937), (2.0000677966101694, 59002), (1.020011190952998, 69271), (1.0087385613960418, 75841), (1.0124327311166634, 84283), (1.250071872125115, 86965), (1.1001389239706996, 87109), (1.017874779920127, 94813), (1.0197043894766944, 114109), (1.0099081137309294, 116503), (1.062651525955505, 119221), (1.0148000579542162, 140083), (1.5000295473348304, 152301), (1.0456077031670352, 157021), (1.008202311278643, 162619), (1.5000271061476742, 166017), (1.062607802353896, 167569), (1.0049688097623168, 176569), (1.2500344428524193, 181465), (1.0066058144411822, 182401), (1.0118147352201767, 199627), (1.0252084180561203, 201679), (2.000019500399758, 205126), (2.000019000209002, 210526), (1.0094663798355163, 212101), (1.0079686825830576, 224269), (1.0251729665879177, 243007), (2.0000159920679343, 250126), (2.000015877804417, 251926), (2.0000154430614323, 259018), (2.0000153895874053, 259918), (1.0078814579346953, 261259), (1.0052467302985095, 277621), (1.0038488725524846, 284029), (1.1000424415464156, 285109), (2.000012793613428, 312658), (2.000012250548212, 326518), (1.1000315023769975, 384109), (1.00340567361668, 400399), (1.004894246190858, 400993), (1.0043908251122835, 409687), (1.2500144850282748, 431485), (1.0144492560003686, 440413), (1.0044045086436526, 449467), (1.0455077221862572, 452203), (1.002946220389957, 474883), (2.0000079965454924, 500218), (2.000007966159753, 502126), (2.0000079650176423, 502198), (1.005974832736581, 504601), (1.0076158203364853, 525121), (1.5000084172250092, 534621), (1.500008338058233, 539697), (1.5000083338889258, 539967), (1.2500114798964055, 544435), (1.500007903139127, 569397), (1.0034153762978777, 579067), (1.100020786877811, 582109), (1.1000204872234225, 590623), (2.000006677796327, 599002), (2.000006667777963, 599902), (1.035763094116063, 615409), (2.0000063239506987, 632518), (1.5000069194575145, 650343), (2.0000061319973756, 652318), (1.5000068908489526, 653043), (2.000006117143294, 653902), (1.500006878335993, 654231), (1.250009510042605, 657205), (1.0036454603929754, 661579), (1.0454901948627653, 674521), (1.500006369913624, 706449), (1.2500088169737325, 708865), (1.0023537885177842, 732031), (1.0040992799929969, 734101), (1.0114858998593284, 736297), (1.0095786632335122, 746539), (1.0022821587445423, 778669), (1.0095725826929156, 779281), (1.100015510871711, 780109), (1.0022690159662961, 783169), (1.0054979227611298, 818053), (1.0041302907057135, 842389), (1.017312089819125, 848833), (1.062521198276206, 852091), (1.500005199450938, 865479), (1.004580465953145, 866527), (1.2500071842383558, 869965), (1.0022844199599343, 880567), (1.0250446895709802, 940417), (1.5000046169756962, 974667)]

# 	import cProfile
# 	cProfile.run('candidates_4(10**5)')	

# 	for ratio, n in cs:
# 		print(ratio, n, getFactorization(n))
# 	print(min(cs))

# 	res = candidates_4(10 ** 7)
# 	print("found solutions:", len(res))
# 	print("result: ", min(res))
	
	
# 	res = candidates_3(10 ** 6)
# 	print(res)
# 	print(min(res))

# 	print(min(candidates), candidates)
# 	for n in range(1, 10 ** 7):
# 		getFactorization(n)
# 		print(n)


# [(1.0, 1), (1.75, 21), (1.515625, 291), (2.008, 502), (2.001589825119237, 2518), (1.5015060240963856, 2991), (1.2514108352144468, 4435), (1.5008389261744965, 5367), (1.5007987220447285, 5637), (2.000194969779684, 20518), (1.0218576526566217, 20617), (2.0001899696048633, 21058), (1.0465257078986587, 22471), (2.000154344806297, 25918), (1.0630064346997141, 35683), (1.2501410835214446, 44305), (1.0204214593817398, 45421), (1.2501264414323285, 49435), (1.5000833889259506, 53967), (1.5000790388871326, 56937), (2.0000677966101694, 59002), (1.020011190952998, 69271), (1.0087385613960418, 75841), (1.0124327311166634, 84283), (1.250071872125115, 86965), (1.1001389239706996, 87109), (1.017874779920127, 94813), (1.0197043894766944, 114109), (1.0099081137309294, 116503), (1.062651525955505, 119221), (1.0148000579542162, 140083), (1.5000295473348304, 152301), (1.0456077031670352, 157021), (1.008202311278643, 162619), (1.5000271061476742, 166017), (1.062607802353896, 167569), (1.0049688097623168, 176569), (1.2500344428524193, 181465), (1.0066058144411822, 182401), (1.0118147352201767, 199627), (1.0252084180561203, 201679), (2.000019500399758, 205126), (2.000019000209002, 210526), (1.0094663798355163, 212101), (1.0079686825830576, 224269), (1.0251729665879177, 243007), (2.0000159920679343, 250126), (2.000015877804417, 251926), (2.0000154430614323, 259018), (2.0000153895874053, 259918), (1.0078814579346953, 261259), (1.0052467302985095, 277621), (1.0038488725524846, 284029), (1.1000424415464156, 285109), (2.000012793613428, 312658), (2.000012250548212, 326518), (1.1000315023769975, 384109), (1.00340567361668, 400399), (1.004894246190858, 400993), (1.0043908251122835, 409687), (1.2500144850282748, 431485), (1.0144492560003686, 440413), (1.0044045086436526, 449467), (1.0455077221862572, 452203), (1.002946220389957, 474883), (2.0000079965454924, 500218), (2.000007966159753, 502126), (2.0000079650176423, 502198), (1.005974832736581, 504601), (1.0076158203364853, 525121), (1.5000084172250092, 534621), (1.500008338058233, 539697), (1.5000083338889258, 539967), (1.2500114798964055, 544435), (1.500007903139127, 569397), (1.0034153762978777, 579067), (1.100020786877811, 582109), (1.1000204872234225, 590623), (2.000006677796327, 599002), (2.000006667777963, 599902), (1.035763094116063, 615409), (2.0000063239506987, 632518), (1.5000069194575145, 650343), (2.0000061319973756, 652318), (1.5000068908489526, 653043), (2.000006117143294, 653902), (1.500006878335993, 654231), (1.250009510042605, 657205), (1.0036454603929754, 661579), (1.0454901948627653, 674521), (1.500006369913624, 706449), (1.2500088169737325, 708865), (1.0023537885177842, 732031), (1.0040992799929969, 734101), (1.0114858998593284, 736297), (1.0095786632335122, 746539), (1.0022821587445423, 778669), (1.0095725826929156, 779281), (1.100015510871711, 780109), (1.0022690159662961, 783169), (1.0054979227611298, 818053), (1.0041302907057135, 842389), (1.017312089819125, 848833), (1.062521198276206, 852091), (1.500005199450938, 865479), (1.004580465953145, 866527), (1.2500071842383558, 869965), (1.0022844199599343, 880567), (1.0250446895709802, 940417), (1.5000046169756962, 974667)]
